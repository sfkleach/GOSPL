;;; Summary:        comparison predicate for gensym'd words
;;; Contributor:    R. Evans, March 1984
;;; Modified:       Steve Leach, Nov 1999

/*  LIB GENSYMBEFORE                    R.Evans March 1984

    gensymbefore is an ordering relation for use with *SYSSORT etc. It is like
    *ALPHABEFORE, except that it gets 'gensym' words (see *GENSYM) in the
    right order.

    Specifically, it chops off integers at the right hand end of the given
    strings and then does alphabefore on the rest. If (and only if) the result
    is 1 (ie the strings were identical), it converts the numbers chopped off
    into integers and does < to determine the final result.

    See HELP *GENSYMBEFORE

*/

compile_mode :pop11 +strict;

section;

/* return split point in string - rightmost non-digit char position */
define lconstant gsb_split( word ) -> l -> c;
    lvars c, l;
    lvars string = fast_word_string( word );
    datalength( string ) ->> c -> l;
    repeat
        quitif( c == 0 );
        quitunless( isnumbercode( fast_subscrs( c, string ) ) );
        c fi_- 1 -> c;
    endrepeat;
enddefine;

define gensymbefore( x, y ) -> res;
    lvars sx, sy, lx, ly;
    lvars res, x, y;
    unless isword( x ) and isword( y ) do
        mishap( x, y, 2, 'Words needed' )
    endunless;
    gsb_split( x ) -> lx -> sx;
    gsb_split( y ) -> ly -> sy;
    if sx == 0 or sy == 0 then
        mishap( x, y, 2, 'Arguments must both be generated by gensym' );
    endif;
    alphabefore(
        substring( 1, sx, x ),
        substring( 1, sy, y)
    ) -> res;
    if res == 1 then
        strnumber( substring( sx fi_+ 1, lx fi_- sx, x ) ) <
        strnumber( substring( sy fi_+ 1, ly fi_- sy, y ) ) -> res;
    endif;
enddefine;

endsection;
